
class MinHeap {
    gr g;
    int *harr;
    int capacity;
    int heap_size;
public:
    MinHeap(int cap) {
        heap_size = 0;
        capacity = cap;
        harr = new int[cap];
    }
    void MinHeapify(int i) {
        int l = left(i);
        int r = right(i);
        int smallest = i;
        if (l < heap_size && harr[l] < harr[i])
            smallest = l;
        if (r < heap_size && harr[r] < harr[smallest])
            smallest = r;
        if (smallest != i) {
            swap(&harr[i], &harr[smallest]);
            MinHeapify(smallest);
        }
    }

    static void swap(int *x, int *y) {
        int temp = *x;
        *x = *y;
        *y = temp;
    }
    int size() {
        return heap_size;
    }
    bool empty() {
        return size() == 0;
    }
    int parent(int i) {
        return (i-1)/2;
    }
    int left(int i) {
        return 2*i + 1;
    }
    int right(int i) {
        return 2*i + 2;
    }
    int pop() {
        if (heap_size <= 0)
            return INT_MAX;
        if (heap_size == 1) {
            heap_size--;
            return harr[0];
        }
        int root = harr[0];
        harr[0] = harr[heap_size-1];
        heap_size--;
        MinHeapify(0);
        return root;
    }
    int top() {
        return harr[0];
    }
    void push(int k) {
        if (heap_size == capacity) {
            cout << "\nOverflow: Could not push\n";
            return;
        }
        heap_size++;
        int i = heap_size - 1;
        harr[i] = k;
        while (i != 0 && harr[parent(i)] > harr[i]) {
            swap(&harr[i], &harr[parent(i)]);
            i = parent(i);
        }
    }
};